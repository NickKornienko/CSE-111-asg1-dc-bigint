head	1.9;
access;
symbols;
locks;
comment	@// @;


1.9
date	2022.01.13.01.32.55;	author -;	state -;
branches;
next	1.8;

1.8
date	2022.01.13.01.32.31;	author -;	state -;
branches;
next	1.7;

1.7
date	2022.01.13.01.25.06;	author -;	state -;
branches;
next	1.6;

1.6
date	2022.01.12.22.17.24;	author -;	state -;
branches;
next	1.5;

1.5
date	2022.01.12.22.15.50;	author -;	state -;
branches;
next	1.4;

1.4
date	2022.01.12.22.15.15;	author -;	state -;
branches;
next	1.3;

1.3
date	2022.01.12.22.14.55;	author -;	state -;
branches;
next	1.2;

1.2
date	2022.01.12.22.14.28;	author -;	state -;
branches;
next	1.1;

1.1
date	2022.01.12.22.13.54;	author -;	state -;
branches;
next	;


desc
@@


1.9
log
@-
@
text
@// $Id: printvector.cpp,v 1.8 2022-01-12 17:32:31-08 - - $

#include <iostream>
#include <vector>
using namespace std;

// Example of printing a vector of uint8_t.

ostream& operator<< (ostream& out, const vector<uint8_t>& vec) {
   for (uint8_t byte: vec) out << static_cast<int> (byte);
   return out;
}

void print_rev1 (const vector<uint8_t>& vec) {
   for (auto itor = vec.crbegin(); itor != vec.crend(); ++itor) {
      cout << static_cast<int> (*itor);
   }
}

void print_rev2 (const vector<uint8_t>& vec) {
   // Note: ssize_t, not size_t, because must stop at -1, not 0.
   for (ssize_t index = vec.size() - 1; index >= 0; --index) {
      cout << static_cast<int> (vec[index]);
   }
}

template <typename Itor>
void print_itor (Itor begin, Itor end) {
   for (; begin != end; ++begin) cout << static_cast<int> (*begin);
}

int main() {
   vector<uint8_t> data {6, 3, 8, 9, 0, 2, 1};
   cout << "operator<<: " << data << endl;
   cout << "print_rev1: "; print_rev1 (data); cout << endl;
   cout << "print_rev2: "; print_rev2 (data); cout << endl;
   cout << "print fwd: "; print_itor (data.cbegin(), data.cend());
   cout << endl;
   cout << "print rev: "; print_itor (data.crbegin(), data.crend());
   cout << endl;
}

//TEST// ./printvector >printvector.out
//TEST// mkpspdf printvector.ps printvector.cpp printvector.out

@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: printvector.cpp,v 1.7 2022-01-12 17:25:06-08 - - $
d38 1
d40 1
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: printvector.cpp,v 1.6 2022-01-12 14:17:24-08 - - $
d27 5
d37 2
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: printvector.cpp,v 1.5 2022-01-12 14:15:50-08 - - $
d31 1
a31 1
   cout << "print_rev2: "; print_rev1 (data); cout << endl;
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: printvector.cpp,v 1.4 2022-01-12 14:15:15-08 - - $
d21 1
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: printvector.cpp,v 1.3 2022-01-12 14:14:55-08 - - $
d15 1
a15 1
   for (const auto itor = vec.crbegin(); itor != vec.crend(); ++itor) {
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: printvector.cpp,v 1.2 2022-01-12 14:14:28-08 - - $
d15 1
a15 1
   for (const auto itor = vec.crbegin(); itor ~= vec.crend(); ++itor) {
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: printvector.cpp,v 1.1 2022-01-12 14:13:54-08 - - $
d10 2
a11 1
   for (uint8_t byte: vec) cout << static_cast<int> (byte);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d5 1
a5 1
using namespaces std;
@
